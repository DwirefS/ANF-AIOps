#!/bin/bash
# Pre-commit hook for ANF-AIOps
# Author: Dwiref Sharma <DwirefS@SapientEdge.io>
# Comprehensive security and quality checks before commit

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_status "Running pre-commit security and quality checks..."

# Check if we're in a git repository
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    print_error "Not in a git repository"
    exit 1
fi

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

if [ -z "$STAGED_FILES" ]; then
    print_warning "No staged files found"
    exit 0
fi

print_status "Staged files: $(echo $STAGED_FILES | wc -w)"

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Track if any checks failed
CHECKS_FAILED=0

# 1. Check for merge conflict markers
print_status "Checking for merge conflict markers..."
if echo "$STAGED_FILES" | grep -E '\.(js|jsx|ts|tsx|cs|json|yaml|yml|md)$' | xargs grep -l "^<<<<<<< \|^======= \|^>>>>>>> " 2>/dev/null; then
    print_error "Merge conflict markers found in staged files"
    CHECKS_FAILED=1
else
    print_success "No merge conflict markers found"
fi

# 2. Check for large files
print_status "Checking for large files (>1MB)..."
LARGE_FILES=$(echo "$STAGED_FILES" | xargs ls -la 2>/dev/null | awk '$5 > 1048576 {print $9}')
if [ -n "$LARGE_FILES" ]; then
    print_error "Large files detected (>1MB):"
    echo "$LARGE_FILES"
    CHECKS_FAILED=1
else
    print_success "No large files detected"
fi

# 3. Secret detection with gitleaks
if command_exists gitleaks; then
    print_status "Running secret detection with gitleaks..."
    if ! gitleaks detect --staged --verbose; then
        print_error "Secrets detected by gitleaks"
        CHECKS_FAILED=1
    else
        print_success "No secrets detected by gitleaks"
    fi
else
    print_warning "gitleaks not found, skipping secret detection"
fi

# 4. Check for hardcoded credentials (basic patterns)
print_status "Checking for hardcoded credentials..."
CREDENTIAL_PATTERNS=(
    "password\s*=\s*['\"][^'\"]*['\"]"
    "api[_-]?key\s*=\s*['\"][^'\"]*['\"]"
    "secret\s*=\s*['\"][^'\"]*['\"]"
    "token\s*=\s*['\"][^'\"]*['\"]"
    "DefaultEndpointsProtocol=https;AccountName="
    "Server=.*Database=.*Password="
)

for pattern in "${CREDENTIAL_PATTERNS[@]}"; do
    if echo "$STAGED_FILES" | xargs grep -l -E "$pattern" 2>/dev/null; then
        print_error "Potential hardcoded credentials found (pattern: $pattern)"
        CHECKS_FAILED=1
    fi
done

if [ $CHECKS_FAILED -eq 0 ]; then
    print_success "No hardcoded credentials detected"
fi

# 5. TypeScript/JavaScript files checks
TS_JS_FILES=$(echo "$STAGED_FILES" | grep -E '\.(ts|tsx|js|jsx)$' || true)
if [ -n "$TS_JS_FILES" ]; then
    print_status "Checking TypeScript/JavaScript files..."
    
    # ESLint check
    if command_exists eslint; then
        print_status "Running ESLint..."
        if ! echo "$TS_JS_FILES" | xargs eslint --max-warnings 0; then
            print_error "ESLint checks failed"
            CHECKS_FAILED=1
        else
            print_success "ESLint checks passed"
        fi
    else
        print_warning "ESLint not found, skipping JavaScript/TypeScript linting"
    fi
    
    # TypeScript compilation check
    if command_exists tsc; then
        print_status "Running TypeScript compilation check..."
        if ! tsc --noEmit; then
            print_error "TypeScript compilation failed"
            CHECKS_FAILED=1
        else
            print_success "TypeScript compilation passed"
        fi
    else
        print_warning "TypeScript compiler not found, skipping compilation check"
    fi
fi

# 6. C# files checks
CS_FILES=$(echo "$STAGED_FILES" | grep -E '\.(cs|csproj)$' || true)
if [ -n "$CS_FILES" ]; then
    print_status "Checking C# files..."
    
    # dotnet format check
    if command_exists dotnet; then
        print_status "Running dotnet format check..."
        if ! dotnet format --verify-no-changes --verbosity normal; then
            print_error "C# formatting issues found. Run 'dotnet format' to fix."
            CHECKS_FAILED=1
        else
            print_success "C# formatting check passed"
        fi
        
        # Build check
        print_status "Running dotnet build check..."
        if ! dotnet build --configuration Release --no-restore; then
            print_error "C# build failed"
            CHECKS_FAILED=1
        else
            print_success "C# build passed"
        fi
    else
        print_warning ".NET CLI not found, skipping C# checks"
    fi
fi

# 7. JSON/YAML validation
print_status "Validating JSON and YAML files..."
JSON_FILES=$(echo "$STAGED_FILES" | grep -E '\.json$' || true)
YAML_FILES=$(echo "$STAGED_FILES" | grep -E '\.(yaml|yml)$' || true)

# Validate JSON files
if [ -n "$JSON_FILES" ]; then
    for file in $JSON_FILES; do
        if ! python3 -m json.tool "$file" > /dev/null 2>&1; then
            print_error "Invalid JSON file: $file"
            CHECKS_FAILED=1
        fi
    done
    if [ $CHECKS_FAILED -eq 0 ]; then
        print_success "JSON validation passed"
    fi
fi

# Validate YAML files
if [ -n "$YAML_FILES" ]; then
    if command_exists yamllint; then
        if ! echo "$YAML_FILES" | xargs yamllint; then
            print_error "YAML validation failed"
            CHECKS_FAILED=1
        else
            print_success "YAML validation passed"
        fi
    else
        print_warning "yamllint not found, skipping YAML validation"
    fi
fi

# 8. Check for TODO/FIXME comments in production code
print_status "Checking for TODO/FIXME comments..."
TODO_COMMENTS=$(echo "$STAGED_FILES" | grep -v -E '\.(md|txt)$' | xargs grep -n -E 'TODO|FIXME|XXX|HACK' 2>/dev/null || true)
if [ -n "$TODO_COMMENTS" ]; then
    print_warning "TODO/FIXME comments found:"
    echo "$TODO_COMMENTS"
fi

# 9. Check for debug statements
print_status "Checking for debug statements..."
DEBUG_PATTERNS=(
    "console\.log"
    "console\.debug"
    "debugger"
    "Debug\.WriteLine"
    "print\("
)

for pattern in "${DEBUG_PATTERNS[@]}"; do
    DEBUG_FOUND=$(echo "$STAGED_FILES" | xargs grep -n -E "$pattern" 2>/dev/null || true)
    if [ -n "$DEBUG_FOUND" ]; then
        print_warning "Debug statements found (pattern: $pattern):"
        echo "$DEBUG_FOUND"
    fi
done

# 10. License header check
print_status "Checking for license headers..."
LICENSE_FILES=$(echo "$STAGED_FILES" | grep -E '\.(ts|tsx|js|jsx|cs)$' || true)
if [ -n "$LICENSE_FILES" ]; then
    for file in $LICENSE_FILES; do
        if ! head -n 10 "$file" | grep -q "Author.*Dwiref Sharma"; then
            print_warning "Missing or incorrect license header in: $file"
        fi
    done
fi

# 11. Security-specific checks for Azure NetApp Files operations
print_status "Running ANF-specific security checks..."
ANF_FILES=$(echo "$STAGED_FILES" | grep -E 'anf|netapp|volume|snapshot' || true)
if [ -n "$ANF_FILES" ]; then
    # Check for hardcoded resource names
    if echo "$ANF_FILES" | xargs grep -E "netappaccount.*prod|volume.*production" 2>/dev/null; then
        print_error "Hardcoded production resource names found"
        CHECKS_FAILED=1
    fi
    
    # Check for proper error handling in ANF operations
    if echo "$ANF_FILES" | xargs grep -L "try.*catch\|Exception" 2>/dev/null; then
        print_warning "ANF files without proper error handling detected"
    fi
fi

# 12. Infrastructure as Code security checks
IaC_FILES=$(echo "$STAGED_FILES" | grep -E '\.(tf|bicep|json|yaml)$' | grep -E 'infra|terraform|bicep' || true)
if [ -n "$IaC_FILES" ]; then
    print_status "Running Infrastructure as Code security checks..."
    
    # Check for hardcoded IP addresses
    if echo "$IaC_FILES" | xargs grep -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' 2>/dev/null | grep -v -E '0\.0\.0\.0|127\.0\.0\.1|10\.|192\.168\.|172\.(1[6-9]|2[0-9]|3[0-1])\.'; then
        print_error "Hardcoded public IP addresses found in infrastructure code"
        CHECKS_FAILED=1
    fi
    
    # Check for weak security configurations
    WEAK_CONFIGS=$(echo "$IaC_FILES" | xargs grep -E 'publicAccess.*true|allowPublic.*true|publicNetworkAccess.*Enabled' 2>/dev/null || true)
    if [ -n "$WEAK_CONFIGS" ]; then
        print_warning "Potential weak security configurations found:"
        echo "$WEAK_CONFIGS"
    fi
fi

# Final status
echo ""
if [ $CHECKS_FAILED -eq 0 ]; then
    print_success "All pre-commit checks passed!"
    exit 0
else
    print_error "Pre-commit checks failed. Please fix the issues above before committing."
    echo ""
    echo "To skip these checks (not recommended), use: git commit --no-verify"
    exit 1
fi