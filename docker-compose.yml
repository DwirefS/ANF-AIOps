# ANF-AIOps Docker Compose Configuration
# Author: Dwiref Sharma <DwirefS@SapientEdge.io>
# Complete multi-service deployment for development and testing

version: '3.8'

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  anf-aiops-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  mcp-data:
    driver: local
  rag-data:
    driver: local
  logs-data:
    driver: local
  redis-data:
    driver: local
  elasticsearch-data:
    driver: local

# =============================================================================
# SERVICES
# =============================================================================
services:
  
  # ===========================================================================
  # CORE APPLICATION SERVICES
  # ===========================================================================
  
  # MCP Server - Model Context Protocol Server
  mcp-server:
    build:
      context: ./src/mcp-server
      dockerfile: Dockerfile
      target: production
    container_name: anf-aiops-mcp
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - LOG_LEVEL=info
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET}
      - AZURE_TENANT_ID=${AZURE_TENANT_ID}
      - AZURE_SUBSCRIPTION_ID=${AZURE_SUBSCRIPTION_ID}
      - MCP_API_KEY=${MCP_API_KEY}
      - REDIS_URL=redis://redis:6379
    volumes:
      - mcp-data:/app/data
      - logs-data:/app/logs
    networks:
      - anf-aiops-network
    depends_on:
      - redis
      - elasticsearch
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "com.anf-aiops.service=mcp-server"
      - "com.anf-aiops.version=2.0.0"

  # Teams Bot - Microsoft Teams Integration
  teams-bot:
    build:
      context: ./src/teams-bot
      dockerfile: Dockerfile
      target: production
    container_name: anf-aiops-teams-bot
    restart: unless-stopped
    ports:
      - "3978:3978"
    environment:
      - NODE_ENV=development
      - PORT=3978
      - LOG_LEVEL=info
      - MICROSOFT_APP_ID=${TEAMS_BOT_ID}
      - MICROSOFT_APP_PASSWORD=${TEAMS_BOT_PASSWORD}
      - MCP_SERVER_URL=http://mcp-server:3000
      - MCP_API_KEY=${MCP_API_KEY}
      - BOT_CACHE_TTL=300
    volumes:
      - logs-data:/app/logs
    networks:
      - anf-aiops-network
    depends_on:
      - mcp-server
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3978/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "com.anf-aiops.service=teams-bot"
      - "com.anf-aiops.version=2.0.0"

  # RAG System - Retrieval-Augmented Generation
  rag-system:
    build:
      context: ./rag
      dockerfile: Dockerfile
      target: production
    container_name: anf-aiops-rag
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - LOG_LEVEL=info
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - AZURE_OPENAI_DEPLOYMENT_NAME=${AZURE_OPENAI_DEPLOYMENT_NAME}
      - AZURE_SEARCH_SERVICE_NAME=${AZURE_SEARCH_SERVICE_NAME}
      - AZURE_SEARCH_API_KEY=${AZURE_SEARCH_API_KEY}
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - REDIS_URL=redis://redis:6379
    volumes:
      - rag-data:/app/data
      - logs-data:/app/logs
    networks:
      - anf-aiops-network
    depends_on:
      - elasticsearch
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    labels:
      - "com.anf-aiops.service=rag-system"
      - "com.anf-aiops.version=2.0.0"

  # Azure Functions (Local Development)
  azure-functions:
    build:
      context: ./functions/ANFServer
      dockerfile: Dockerfile
    container_name: anf-aiops-functions
    restart: unless-stopped
    ports:
      - "7071:80"
    environment:
      - FUNCTIONS_WORKER_RUNTIME=dotnet-isolated
      - AzureWebJobsStorage=${AZURE_STORAGE_CONNECTION_STRING}
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET}
      - AZURE_TENANT_ID=${AZURE_TENANT_ID}
      - AZURE_SUBSCRIPTION_ID=${AZURE_SUBSCRIPTION_ID}
      - ANF_ACCOUNT_NAME=${ANF_ACCOUNT_NAME}
      - ANF_RESOURCE_GROUP=${ANF_RESOURCE_GROUP}
      - JWT_SECRET=${JWT_SECRET}
      - MCP_SERVER_URL=http://mcp-server:3000
      - MCP_API_KEY=${MCP_API_KEY}
    volumes:
      - logs-data:/home/site/wwwroot/logs
    networks:
      - anf-aiops-network
    depends_on:
      - mcp-server
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "com.anf-aiops.service=azure-functions"
      - "com.anf-aiops.version=2.0.0"

  # ===========================================================================
  # INFRASTRUCTURE SERVICES
  # ===========================================================================

  # Redis - Caching and Session Storage
  redis:
    image: redis:7-alpine
    container_name: anf-aiops-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-defaultpassword}
    volumes:
      - redis-data:/data
    networks:
      - anf-aiops-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.anf-aiops.service=redis"
      - "com.anf-aiops.type=infrastructure"

  # Elasticsearch - Search and Analytics
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: anf-aiops-elasticsearch
    restart: unless-stopped
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - anf-aiops-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    labels:
      - "com.anf-aiops.service=elasticsearch"
      - "com.anf-aiops.type=infrastructure"

  # ===========================================================================
  # MONITORING SERVICES
  # ===========================================================================

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: anf-aiops-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/rules:/etc/prometheus/rules:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - anf-aiops-network
    labels:
      - "com.anf-aiops.service=prometheus"
      - "com.anf-aiops.type=monitoring"

  # Grafana - Monitoring Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: anf-aiops-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - anf-aiops-network
    depends_on:
      - prometheus
    labels:
      - "com.anf-aiops.service=grafana"
      - "com.anf-aiops.type=monitoring"

  # Jaeger - Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: anf-aiops-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - anf-aiops-network
    labels:
      - "com.anf-aiops.service=jaeger"
      - "com.anf-aiops.type=monitoring"

  # ===========================================================================
  # DEVELOPMENT SERVICES
  # ===========================================================================

  # Mailhog - Email Testing (Development Only)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: anf-aiops-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - anf-aiops-network
    profiles:
      - development
    labels:
      - "com.anf-aiops.service=mailhog"
      - "com.anf-aiops.type=development"

  # Nginx - Reverse Proxy and Load Balancer
  nginx:
    image: nginx:alpine
    container_name: anf-aiops-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - anf-aiops-network
    depends_on:
      - mcp-server
      - teams-bot
      - rag-system
    profiles:
      - production
    labels:
      - "com.anf-aiops.service=nginx"
      - "com.anf-aiops.type=infrastructure"