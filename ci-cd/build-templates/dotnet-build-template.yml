# .NET Build Template
# Author: Dwiref Sharma <DwirefS@SapientEdge.io>

parameters:
  - name: projectPath
    type: string
  - name: projectName
    type: string
  - name: buildConfiguration
    type: string
    default: 'Release'
  - name: dotnetVersion
    type: string
    default: '8.0.x'
  - name: runTests
    type: boolean
    default: true
  - name: publishArtifact
    type: boolean
    default: true

steps:
  - task: UseDotNet@2
    displayName: 'Setup .NET SDK ${{ parameters.dotnetVersion }}'
    inputs:
      version: ${{ parameters.dotnetVersion }}
      packageType: sdk

  - task: Cache@2
    displayName: 'Cache NuGet packages'
    inputs:
      key: 'nuget | "$(Agent.OS)" | ${{ parameters.projectPath }}/**/*.csproj'
      restoreKeys: |
        nuget | "$(Agent.OS)"
      path: $(Pipeline.Workspace)/.nuget/packages

  - task: DotNetCoreCLI@2
    displayName: 'Restore NuGet packages'
    inputs:
      command: 'restore'
      projects: '${{ parameters.projectPath }}/**/*.csproj'
      feedsToUse: 'select'

  - task: DotNetCoreCLI@2
    displayName: 'Build ${{ parameters.projectName }}'
    inputs:
      command: 'build'
      projects: '${{ parameters.projectPath }}/**/*.csproj'
      arguments: '--configuration ${{ parameters.buildConfiguration }} --no-restore'

  - task: DotNetCoreCLI@2
    displayName: 'Run tests'
    condition: and(succeeded(), eq('${{ parameters.runTests }}', 'true'))
    inputs:
      command: 'test'
      projects: '${{ parameters.projectPath }}/**/*Tests.csproj'
      arguments: '--configuration ${{ parameters.buildConfiguration }} --no-build --collect:"XPlat Code Coverage" --logger:trx --results-directory $(Agent.TempDirectory)'

  - task: PublishTestResults@2
    displayName: 'Publish test results'
    condition: and(succeeded(), eq('${{ parameters.runTests }}', 'true'))
    inputs:
      testResultsFormat: 'VSTest'
      testResultsFiles: '$(Agent.TempDirectory)/**/*.trx'
      testRunTitle: '${{ parameters.projectName }} Tests'

  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage'
    condition: and(succeeded(), eq('${{ parameters.runTests }}', 'true'))
    inputs:
      codeCoverageTool: 'Cobertura'
      summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'

  - task: DotNetCoreCLI@2
    displayName: 'Publish ${{ parameters.projectName }}'
    condition: and(succeeded(), eq('${{ parameters.publishArtifact }}', 'true'))
    inputs:
      command: 'publish'
      publishWebProjects: false
      projects: '${{ parameters.projectPath }}/**/*.csproj'
      arguments: '--configuration ${{ parameters.buildConfiguration }} --output $(Build.ArtifactStagingDirectory)/${{ parameters.projectName }}'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish ${{ parameters.projectName }} artifact'
    condition: and(succeeded(), eq('${{ parameters.publishArtifact }}', 'true'))
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/${{ parameters.projectName }}'
      ArtifactName: '${{ parameters.projectName }}-drop'