# Continuous Integration Workflow
# Author: Dwiref Sharma <DwirefS@SapientEdge.io>
name: CI

on:
  push:
    branches: [ main, develop, 'feature/**' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '18.x'
  AZURE_FUNCTIONAPP_PACKAGE_PATH: './functions/ANFServer'
  BUILD_CONFIGURATION: 'Release'

jobs:
  # Code quality and linting
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            rag/package-lock.json
            src/mcp-server/package-lock.json
            src/teams-bot/package-lock.json

      - name: Install Node.js dependencies
        run: |
          cd rag && npm ci
          cd ../src/mcp-server && npm ci
          cd ../teams-bot && npm ci

      - name: Run ESLint
        run: |
          cd rag && npm run lint || true
          cd ../src/mcp-server && npm run lint || true
          cd ../teams-bot && npm run lint || true

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Run .NET format check
        run: |
          cd ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
          dotnet format --verify-no-changes --verbosity diagnostic || true

  # Build Azure Functions
  build-functions:
    name: Build Azure Functions
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: |
          cd ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
          dotnet restore

      - name: Build
        run: |
          cd ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
          dotnet build --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore

      - name: Run tests
        run: |
          cd ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
          dotnet test --configuration ${{ env.BUILD_CONFIGURATION }} --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: ./functions/ANFServer/coverage
          flags: functions
          name: azure-functions

      - name: Publish Functions
        run: |
          cd ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
          dotnet publish --configuration ${{ env.BUILD_CONFIGURATION }} --output ./publish

      - name: Upload Functions artifact
        uses: actions/upload-artifact@v3
        with:
          name: functions-app
          path: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/publish

  # Build TypeScript projects
  build-typescript:
    name: Build TypeScript Projects
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        project:
          - { name: 'RAG System', path: 'rag' }
          - { name: 'MCP Server', path: 'src/mcp-server' }
          - { name: 'Teams Bot', path: 'src/teams-bot' }
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.project.path }}/package-lock.json

      - name: Install dependencies
        run: |
          cd ${{ matrix.project.path }}
          npm ci

      - name: Run tests
        run: |
          cd ${{ matrix.project.path }}
          npm test -- --coverage || true

      - name: Build
        run: |
          cd ${{ matrix.project.path }}
          npm run build

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.project.name }}-build
          path: ${{ matrix.project.path }}/dist

  # Validate Terraform
  validate-terraform:
    name: Validate Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Terraform Format Check
        run: |
          cd infra
          terraform fmt -check -recursive

      - name: Terraform Init
        run: |
          cd infra
          terraform init -backend=false

      - name: Terraform Validate
        run: |
          cd infra
          terraform validate

  # Validate Bicep templates
  validate-bicep:
    name: Validate Bicep Templates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Azure CLI
        uses: azure/setup-cli@v1

      - name: Install Bicep
        run: az bicep install

      - name: Validate Bicep files
        run: |
          cd src/infrastructure/bicep
          for file in $(find . -name "*.bicep"); do
            echo "Validating $file"
            az bicep build --file "$file"
          done

  # Security scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-functions, build-typescript]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: Run integration tests
        run: |
          echo "Running integration tests..."
          # Add actual integration test commands here

  # Final CI status check
  ci-status:
    name: CI Status Check
    runs-on: ubuntu-latest
    needs: [build-functions, build-typescript, validate-terraform, validate-bicep, security-scan]
    if: always()
    steps:
      - name: Check CI Status
        run: |
          if [ "${{ contains(needs.*.result, 'failure') }}" == "true" ]; then
            echo "CI pipeline failed"
            exit 1
          else
            echo "CI pipeline passed"
          fi