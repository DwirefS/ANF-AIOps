# Deploy to Development Environment
# Author: Dwiref Sharma <DwirefS@SapientEdge.io>
name: Deploy to Dev

on:
  push:
    branches: [ develop ]
  workflow_dispatch:
    inputs:
      deploy_functions:
        description: 'Deploy Azure Functions'
        required: false
        default: true
        type: boolean
      deploy_infrastructure:
        description: 'Deploy Infrastructure'
        required: false
        default: false
        type: boolean

env:
  AZURE_FUNCTIONAPP_NAME: 'anf-aiops-functions-dev'
  AZURE_FUNCTIONAPP_PACKAGE_PATH: './functions/ANFServer'
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '18.x'
  ENVIRONMENT: 'dev'
  RESOURCE_GROUP: 'rg-anf-aiops-dev'
  LOCATION: 'eastus'

jobs:
  # Build and test before deployment
  build:
    name: Build and Test
    uses: ./.github/workflows/ci.yml
    secrets: inherit

  # Deploy infrastructure if requested
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: build
    if: github.event.inputs.deploy_infrastructure == 'true' || github.event_name == 'push'
    environment:
      name: development
      url: https://anf-aiops-dev.azurewebsites.net
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_DEV }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Terraform Init
        run: |
          cd infra
          terraform init \
            -backend-config="resource_group_name=${{ env.RESOURCE_GROUP }}" \
            -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT_DEV }}" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=dev.terraform.tfstate"

      - name: Terraform Plan
        id: plan
        run: |
          cd infra
          terraform plan \
            -var="environment=${{ env.ENVIRONMENT }}" \
            -var="location=${{ env.LOCATION }}" \
            -var="resource_group_name=${{ env.RESOURCE_GROUP }}" \
            -out=tfplan

      - name: Terraform Apply
        run: |
          cd infra
          terraform apply -auto-approve tfplan

      - name: Export Infrastructure Outputs
        id: tf_outputs
        run: |
          cd infra
          echo "function_app_name=$(terraform output -raw function_app_name)" >> $GITHUB_OUTPUT
          echo "apim_gateway_url=$(terraform output -raw apim_gateway_url)" >> $GITHUB_OUTPUT
          echo "key_vault_name=$(terraform output -raw key_vault_name)" >> $GITHUB_OUTPUT

  # Deploy Azure Functions
  deploy-functions:
    name: Deploy Azure Functions
    runs-on: ubuntu-latest
    needs: [build, deploy-infrastructure]
    if: github.event.inputs.deploy_functions != 'false'
    environment:
      name: development
      url: https://anf-aiops-dev.azurewebsites.net
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_DEV }}

      - name: Download Functions artifact
        uses: actions/download-artifact@v4
        with:
          name: functions-app
          path: ./functions-publish

      - name: Deploy to Azure Functions
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
          package: ./functions-publish
          
      - name: Update Function App Settings
        run: |
          az functionapp config appsettings set \
            --name ${{ env.AZURE_FUNCTIONAPP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --settings \
              "AzureWebJobsStorage=${{ secrets.STORAGE_CONNECTION_STRING_DEV }}" \
              "FUNCTIONS_WORKER_RUNTIME=dotnet-isolated" \
              "FUNCTIONS_EXTENSION_VERSION=~4" \
              "KeyVaultName=${{ needs.deploy-infrastructure.outputs.key_vault_name }}" \
              "Environment=${{ env.ENVIRONMENT }}"

  # Deploy Node.js applications
  deploy-nodejs-apps:
    name: Deploy Node.js Applications
    runs-on: ubuntu-latest
    needs: [build, deploy-infrastructure]
    strategy:
      matrix:
        app:
          - { name: 'mcp-server', path: 'src/mcp-server', app_name: 'anf-aiops-mcp-dev' }
          - { name: 'teams-bot', path: 'src/teams-bot', app_name: 'anf-aiops-teams-dev' }
    environment:
      name: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_DEV }}

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.app.name }}-build
          path: ./${{ matrix.app.name }}-dist

      - name: Deploy to Azure App Service
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ matrix.app.app_name }}
          package: ./${{ matrix.app.name }}-dist

  # Run post-deployment tests
  post-deployment-tests:
    name: Post-Deployment Tests
    runs-on: ubuntu-latest
    needs: [deploy-functions, deploy-nodejs-apps]
    environment:
      name: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run smoke tests
        run: |
          cd ci-cd/scripts
          chmod +x run-smoke-tests.sh
          ./run-smoke-tests.sh ${{ env.ENVIRONMENT }}

      - name: Health check endpoints
        run: |
          # Check Functions health
          curl -f https://${{ env.AZURE_FUNCTIONAPP_NAME }}.azurewebsites.net/api/health || exit 1
          
          # Check MCP Server health
          curl -f https://anf-aiops-mcp-dev.azurewebsites.net/health || exit 1
          
          # Check Teams Bot health
          curl -f https://anf-aiops-teams-dev.azurewebsites.net/health || exit 1

  # Notify deployment status
  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: post-deployment-tests
    if: always()
    steps:
      - name: Send notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Deployment to Development Environment
            Status: ${{ job.status }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_DEV }}